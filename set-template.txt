package {{.Package}}

import (
	"fmt"
	"strings"
)

// This will fail if the underlying type cannot be converted to a uint64.
// Your underlying type MUST be convertible to uint64.
var _ = uint64({{.Underlying}}(0))


// This will fail if the base type cannot be converted to a the new type.
var _ = {{.Name}}({{.BaseType}}(0))

type {{.Name}} {{.Underlying}}

// New{{.Name}} will create a new {{.BaseType}} set with the {{.BaseType}} types supplied
func New{{.Name}}(t ...{{.BaseType}}) {{.Name}} {
	x := {{.Name}}(0)
	return x.Set(t...)
}

// Set one or more {{.BaseType}} types to the set.
// Returns the modified {{.BaseType}} set.
func (x *{{.Name}}) Set(t ...{{.BaseType}}) {{.Name}} {
	for _, v := range t {
		*x |= {{.Name}}(v)
	}
	return *x
}

// Clear one or more types from the set.
// Returns the modified {{.BaseType}} set.
func (x *{{.Name}}) Clear(t ...{{.BaseType}}) {{.Name}} {
	for _, v := range t {
		*x &= ^{{.Name}}(v)
	}
	return *x
}

// Toggle one or more types from the set.
// Returns the modified {{.BaseType}} set.
func (x *{{.Name}}) Toggle(t ...{{.BaseType}}) {{.Name}} {
	for _, v := range t {
		*x ^= {{.Name}}(v)
	}
	return *x
}

// Contains returns true if the t is set in x
func (x {{.Name}}) Contains(t {{.BaseType}}) bool {
	return {{.Underlying}}(x)&{{.Underlying}}(t) != 0
}

// Overlap returns the overlapping bits
// (AND binary operation)
func (x {{.Name}}) Overlap(t {{.Name}}) {{.Name}} {
	return {{.Name}}({{.Underlying}}(x) & {{.Underlying}}(t))
}

// Combine returns the combined bit sets
// (OR binary operation)
func (x {{.Name}}) Combine(t {{.Name}}) {{.Name}} {
	return {{.Name}}({{.Underlying}}(x) | {{.Underlying}}(t))
}

// Same returns the bit values that are the same.
// (XOR binary operation)
func (x {{.Name}}) Same(t {{.Name}}) {{.Name}} {
	return {{.Name}}({{.Underlying}}(x) ^ {{.Underlying}}(t))
}

// SubsetOf will return true if all types of y
// is present in the set x
func (x {{.Name}}) SubsetOf(y {{.Name}}) bool {
	return {{.Underlying}}(x)|{{.Underlying}}(y) == {{.Underlying}}(y)
}

// First will return the first set {{.BaseType}}.
func (x {{.Name}}) First() {{.BaseType}} {
	v := {{.Underlying}}(x)
	i := uint(0)
	for v != 0 {
		if v&1 != 0 {
			return {{.BaseType}}(1 << i)
		}
		i++
		v >>= 1
	}
	return {{.BaseType}}(0)
}

// Array returns an array of all {{.BaseType}} types in the set
func (x {{.Name}}) Array() (ht []{{.BaseType}}) {
	v := uint64(x)
	i := uint(0)
	for v != 0 {
		if v&1 != 0 {
			ht = append(ht, {{.BaseType}}(1<<i))
		}
		i++
		v >>= 1
	}
	return ht
}

// Count returns the number of {{.BaseType}} types in the set
func (x {{.Name}}) Count() int {
	if {{.Underlying}}(x) == 0 {
		return 0
	}
	// credit: https://code.google.com/u/arnehormann/
	y := uint64(x)
	y -= (y >> 1) & 0x5555555555555555
	y = (y>>2)&0x3333333333333333 + y&0x3333333333333333
	y += y >> 4
	y &= 0x0f0f0f0f0f0f0f0f
	y *= 0x0101010101010101
	return int(y >> 56)
}

// String returns a string representation of the {{.BaseType}} set.
func (x {{.Name}}) String() string {
	a := x.Array()
	var r []string
	for _, v := range a {
		s := fmt.Sprintf("%v", v)
		r = append(r, s)
	}
	return "[" + strings.Join(r, ", ") + "]"
}
